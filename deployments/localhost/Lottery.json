{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCordinatorv2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLaneHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callBackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Lottery__NotEnoughEthEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Lottery__UpKeepNotNeeded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "players",
          "type": "address"
        }
      ],
      "name": "LotteryEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "ReqestedLotteryWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterLottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLotteryState",
      "outputs": [
        {
          "internalType": "enum Lottery.LotteryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberofPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getvrfCoordinatoraddress",
      "outputs": [
        {
          "internalType": "contract VRFCoordinatorV2Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1358102c8bedcdc8e3e7de11a9d8172945a84b7128c771bc5788192313fc9ea7",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1265709",
    "logsBloom": "0x
    "blockHash": "0xaf5f47d865a67ec1c0c7f9a4266048d1b2b9d741a6bade791e0514e27255948f",
    "transactionHash": "0x1358102c8bedcdc8e3e7de11a9d8172945a84b7128c771bc5788192313fc9ea7",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1265709",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "10000000000000000",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "1",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "a4f6f69b06fe0791bdeb668a0d16245d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCordinatorv2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLaneHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callBackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Lottery__NotEnoughEthEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Lottery__UpKeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"players\",\"type\":\"address\"}],\"name\":\"LotteryEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"ReqestedLotteryWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryState\",\"outputs\":[{\"internalType\":\"enum Lottery.LotteryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberofPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getvrfCoordinatoraddress\",\"outputs\":[{\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"This is the function that the Chainlink Keeper nodes call they look for `upkeepNeeded` to return True. the following should be true for this to return true: 1. The time interval has passed between raffle runs. 2. The lottery is open. 3. The contract has ETH. 4. Implicity, your subscription is funded with LINK.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getEntranceFee()\":{\"notice\":\"View/Pure functions - Note - External functions are cheaper then the public functions as solidity knows that our contract cannot call this function.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n// Enter the lottery(playing some amount)\\n// Pick a random number(verifyable random number)\\n// Winner to selected everu=y X minutes - Or X years fully automated\\n// Chain link oracle -> Randomness Automated Exceaution -> Chainlink Keepers\\n\\nerror Lottery__NotEnoughEthEntered();\\nerror Lottery__TransferFailed();\\nerror Lottery__NotOpen();\\nerror Lottery__UpKeepNotNeeded(uint256 currentBalance, uint256 numPlayers, uint256 raffleState);\\n\\ncontract Lottery is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n    /** Type declarations */\\n    enum LotteryState {\\n        OPEN,\\n        CALCULATING\\n    }\\n    /* State Variables */\\n    uint256 private immutable i_entranceFee;\\n    address payable[] private s_players;\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_gasLaneHash;\\n    uint64 private immutable i_subscriptionId;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private immutable i_callBackGasLimit;\\n    uint32 private constant NUM_OF_WORDS = 1;\\n\\n    /**Lottery variables*/\\n    address private s_recentWinner;\\n    LotteryState private s_lotteryState;\\n    uint256 private s_lastTimeStamp;\\n    uint256 private immutable i_interval;\\n\\n    event LotteryEnter(address indexed players);\\n    event ReqestedLotteryWinner(uint256 indexed requestId);\\n    event WinnerPicked(address indexed winner);\\n\\n    constructor(\\n        address vrfCordinatorv2,\\n        uint256 entranceFee,\\n        bytes32 gasLaneHash,\\n        uint64 subscriptionId,\\n        uint32 callBackGasLimit,\\n        uint256 interval\\n    ) VRFConsumerBaseV2(vrfCordinatorv2) {\\n        i_entranceFee = entranceFee;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCordinatorv2);\\n        i_gasLaneHash = gasLaneHash;\\n        i_subscriptionId = subscriptionId;\\n        i_callBackGasLimit = callBackGasLimit;\\n        s_lotteryState = LotteryState.OPEN;\\n        i_interval = interval;\\n        s_lastTimeStamp = block.timestamp;\\n    }\\n\\n    function enterLottery() public payable {\\n        if (msg.value < i_entranceFee) {\\n            revert Lottery__NotEnoughEthEntered();\\n        }\\n        if (s_lotteryState != LotteryState.OPEN) {\\n            revert Lottery__NotOpen();\\n        }\\n        s_players.push(payable(msg.sender));\\n        emit LotteryEnter(msg.sender);\\n    }\\n\\n    /**\\n     * @dev This is the function that the Chainlink Keeper nodes call\\n     * they look for `upkeepNeeded` to return True.\\n     * the following should be true for this to return true:\\n     * 1. The time interval has passed between raffle runs.\\n     * 2. The lottery is open.\\n     * 3. The contract has ETH.\\n     * 4. Implicity, your subscription is funded with LINK.\\n     */\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    ) public view override returns (bool upkeepNeeded, bytes memory /* performData */) {\\n        bool isOpen = (LotteryState.OPEN == s_lotteryState);\\n        bool timepassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\n        bool hasPlayers = (s_players.length > 0);\\n        bool hasBalance = address(this).balance > 0;\\n        upkeepNeeded = (isOpen && timepassed && hasPlayers && hasBalance);\\n        return (upkeepNeeded, \\\"0x0\\\");\\n    }\\n\\n    // VRF Version 2- In VRF version 1 you would be funding your contract with link in VRF version 2 you would be funding\\n    // your subscription which is basically a account that allows you to fund and maintain balance for multiple\\n    // consumer contract.\\n    function performUpkeep(bytes calldata /* performData */) external override {\\n        /** Request the random number\\n         * Once we get it, We'll do something with it.\\n         * Chainlink VRF is two transation process\\n         * If it is one transaction then people can brute force tries simulating calling this trasaction.\\n         * s_subscriptionId - Is the subscription that we need to funding our requests.\\n         */\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upkeepNeeded) {\\n            revert Lottery__UpKeepNotNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint256(s_lotteryState)\\n            );\\n        }\\n\\n        s_lotteryState = LotteryState.CALCULATING;\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLaneHash,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callBackGasLimit,\\n            NUM_OF_WORDS\\n        );\\n        emit ReqestedLotteryWinner(requestId);\\n    }\\n\\n    /**Chainlink keepers will call this function. */\\n    function fulfillRandomWords(\\n        uint256,\\n        /*requestId */ uint256[] memory randomWords\\n    ) internal override {\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[indexOfWinner];\\n        s_recentWinner = recentWinner;\\n        s_lotteryState = LotteryState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n        s_players = new address payable[](0);\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n\\n        if (!success) {\\n            revert Lottery__TransferFailed();\\n        }\\n        emit WinnerPicked(recentWinner);\\n    }\\n\\n    /** View/Pure functions - Note - External functions are cheaper then the public functions\\n     * as solidity knows that our contract cannot call this function.\\n     */\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getNumberofPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    function getNumWords() public pure returns (uint256) {\\n        return NUM_OF_WORDS;\\n    }\\n\\n    function getRequestConfirmations() public pure returns (uint256) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n\\n    function getPlayer(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getLastTimeStamp() public view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n\\n    function getvrfCoordinatoraddress() public view returns (VRFCoordinatorV2Interface) {\\n        return i_vrfCoordinator;\\n    }\\n\\n    function getLotteryState() public view returns (LotteryState) {\\n        return s_lotteryState;\\n    }\\n}\\n\",\"keccak256\":\"0x3289183a0093770ced38c530d5b732d93c33e0023ae6ff5d986fb6831f3d6d3a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b506040516200192c3803806200192c833981810160405281019062000038919062000294565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff16815250508163ffffffff166101208163ffffffff16815250506000600160146101000a81548160ff021916908360018111156200010d576200010c62000330565b5b0217905550806101408181525050426002819055505050505050506200035f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001608262000133565b9050919050565b620001728162000153565b81146200017e57600080fd5b50565b600081519050620001928162000167565b92915050565b6000819050919050565b620001ad8162000198565b8114620001b957600080fd5b50565b600081519050620001cd81620001a2565b92915050565b6000819050919050565b620001e881620001d3565b8114620001f457600080fd5b50565b6000815190506200020881620001dd565b92915050565b600067ffffffffffffffff82169050919050565b6200022d816200020e565b81146200023957600080fd5b50565b6000815190506200024d8162000222565b92915050565b600063ffffffff82169050919050565b6200026e8162000253565b81146200027a57600080fd5b50565b6000815190506200028e8162000263565b92915050565b60008060008060008060c08789031215620002b457620002b36200012e565b5b6000620002c489828a0162000181565b9650506020620002d789828a01620001bc565b9550506040620002ea89828a01620001f7565b9450506060620002fd89828a016200023c565b93505060806200031089828a016200027d565b92505060a06200032389828a01620001bc565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e051610100516101205161014051611556620003d6600039600081816106e8015261079101526000610583015260006105600152600061053f015260008181610428015261050301526000818161034001526107b701526000818161036601526103ba01526115566000f3fe6080604052600436106100dd5760003560e01c80635f1b0fd81161007f57806391ad27b41161005957806391ad27b41461029f578063c1af5785146102ca578063c1c244e8146102d4578063e55ae4e8146102ff576100dd565b80635f1b0fd81461020b5780636b68c03c146102365780636e04ff0d14610261576100dd565b80634585e33b116100bb5780634585e33b14610161578063473f1ddc1461018a57806349a706ce146101b557806353a2c19a146101e0576100dd565b806309bc33a7146100e25780631fe543e31461010d57806342433d1514610136575b600080fd5b3480156100ee57600080fd5b506100f761033c565b6040516101049190610c66565b60405180910390f35b34801561011957600080fd5b50610134600480360381019061012f9190610e1a565b610364565b005b34801561014257600080fd5b5061014b610424565b6040516101589190610ef5565b60405180910390f35b34801561016d57600080fd5b5061018860048036038101906101839190610f6b565b61044c565b005b34801561019657600080fd5b5061019f61063c565b6040516101ac9190610fd9565b60405180910390f35b3480156101c157600080fd5b506101ca610666565b6040516101d79190610c66565b60405180910390f35b3480156101ec57600080fd5b506101f5610672565b6040516102029190610c66565b60405180910390f35b34801561021757600080fd5b50610220610681565b60405161022d9190610c66565b60405180910390f35b34801561024257600080fd5b5061024b61068e565b604051610258919061106b565b60405180910390f35b34801561026d57600080fd5b506102886004803603810190610283919061113b565b6106a5565b60405161029692919061121e565b60405180910390f35b3480156102ab57600080fd5b506102b461078d565b6040516102c19190610c66565b60405180910390f35b6102d26107b5565b005b3480156102e057600080fd5b506102e9610924565b6040516102f69190610c66565b60405180910390f35b34801561030b57600080fd5b506103266004803603810190610321919061124e565b61092e565b6040516103339190610fd9565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461041657337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161040d92919061127b565b60405180910390fd5b6104208282610975565b5050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000610466604051806020016040528060008152506106a5565b509050806104d55747600080549050600160149054906101000a900460ff16600181111561049757610496610ff4565b5b6040517fa9e3cfef0000000000000000000000000000000000000000000000000000000081526004016104cc939291906112a4565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156104fa576104f9610ff4565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016105c4959493929190611353565b6020604051808303816000875af11580156105e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060791906113bb565b9050807fef9aecd6668994171580c9767697a76b3439fdbbcb94780ef22a49b99b77e7d960405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008080549050905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b6000600160149054906101000a900460ff16905090565b600060606000600160149054906101000a900460ff1660018111156106cd576106cc610ff4565b5b600060018111156106e1576106e0610ff4565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426107159190611417565b119050600080600080549050119050600080471190508380156107355750825b801561073e5750815b80156107475750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000034101561080f576040517f3e8f808800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561082357610822610ff4565b5b600160149054906101000a900460ff16600181111561084557610844610ff4565b5b1461087c576040517fe76be6fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f1d64fb5ba9f2548c5b98468d58f25b87b9e866afee0122e92d9fe722bf85076c60405160405180910390a2565b6000600254905090565b60008082815481106109435761094261144b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050826000815181106109905761098f61144b565b5b60200260200101516109a291906114a9565b905060008082815481106109b9576109b861144b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff02191690836001811115610a4d57610a4c610ff4565b5b021790555042600281905550600067ffffffffffffffff811115610a7457610a73610cd7565b5b604051908082528060200260200182016040528015610aa25781602001602082028036833780820191505090505b5060009080519060200190610ab8929190610ba6565b5060008173ffffffffffffffffffffffffffffffffffffffff1647604051610adf9061150b565b60006040518083038185875af1925050503d8060008114610b1c576040519150601f19603f3d011682016040523d82523d6000602084013e610b21565b606091505b5050905080610b5c576040517f1c94012000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610c1f579160200282015b82811115610c1e5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610bc6565b5b509050610c2c9190610c30565b5090565b5b80821115610c49576000816000905550600101610c31565b5090565b6000819050919050565b610c6081610c4d565b82525050565b6000602082019050610c7b6000830184610c57565b92915050565b6000604051905090565b600080fd5b600080fd5b610c9e81610c4d565b8114610ca957600080fd5b50565b600081359050610cbb81610c95565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d0f82610cc6565b810181811067ffffffffffffffff82111715610d2e57610d2d610cd7565b5b80604052505050565b6000610d41610c81565b9050610d4d8282610d06565b919050565b600067ffffffffffffffff821115610d6d57610d6c610cd7565b5b602082029050602081019050919050565b600080fd5b6000610d96610d9184610d52565b610d37565b90508083825260208201905060208402830185811115610db957610db8610d7e565b5b835b81811015610de25780610dce8882610cac565b845260208401935050602081019050610dbb565b5050509392505050565b600082601f830112610e0157610e00610cc1565b5b8135610e11848260208601610d83565b91505092915050565b60008060408385031215610e3157610e30610c8b565b5b6000610e3f85828601610cac565b925050602083013567ffffffffffffffff811115610e6057610e5f610c90565b5b610e6c85828601610dec565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610ebb610eb6610eb184610e76565b610e96565b610e76565b9050919050565b6000610ecd82610ea0565b9050919050565b6000610edf82610ec2565b9050919050565b610eef81610ed4565b82525050565b6000602082019050610f0a6000830184610ee6565b92915050565b600080fd5b60008083601f840112610f2b57610f2a610cc1565b5b8235905067ffffffffffffffff811115610f4857610f47610f10565b5b602083019150836001820283011115610f6457610f63610d7e565b5b9250929050565b60008060208385031215610f8257610f81610c8b565b5b600083013567ffffffffffffffff811115610fa057610f9f610c90565b5b610fac85828601610f15565b92509250509250929050565b6000610fc382610e76565b9050919050565b610fd381610fb8565b82525050565b6000602082019050610fee6000830184610fca565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6002811061103457611033610ff4565b5b50565b600081905061104582611023565b919050565b600061105582611037565b9050919050565b6110658161104a565b82525050565b6000602082019050611080600083018461105c565b92915050565b600080fd5b600067ffffffffffffffff8211156110a6576110a5610cd7565b5b6110af82610cc6565b9050602081019050919050565b82818337600083830152505050565b60006110de6110d98461108b565b610d37565b9050828152602081018484840111156110fa576110f9611086565b5b6111058482856110bc565b509392505050565b600082601f83011261112257611121610cc1565b5b81356111328482602086016110cb565b91505092915050565b60006020828403121561115157611150610c8b565b5b600082013567ffffffffffffffff81111561116f5761116e610c90565b5b61117b8482850161110d565b91505092915050565b60008115159050919050565b61119981611184565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156111d95780820151818401526020810190506111be565b60008484015250505050565b60006111f08261119f565b6111fa81856111aa565b935061120a8185602086016111bb565b61121381610cc6565b840191505092915050565b60006040820190506112336000830185611190565b818103602083015261124581846111e5565b90509392505050565b60006020828403121561126457611263610c8b565b5b600061127284828501610cac565b91505092915050565b60006040820190506112906000830185610fca565b61129d6020830184610fca565b9392505050565b60006060820190506112b96000830186610c57565b6112c66020830185610c57565b6112d36040830184610c57565b949350505050565b6000819050919050565b6112ee816112db565b82525050565b600067ffffffffffffffff82169050919050565b611311816112f4565b82525050565b600061ffff82169050919050565b61132e81611317565b82525050565b600063ffffffff82169050919050565b61134d81611334565b82525050565b600060a08201905061136860008301886112e5565b6113756020830187611308565b6113826040830186611325565b61138f6060830185611344565b61139c6080830184611344565b9695505050505050565b6000815190506113b581610c95565b92915050565b6000602082840312156113d1576113d0610c8b565b5b60006113df848285016113a6565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061142282610c4d565b915061142d83610c4d565b9250828203905081811115611445576114446113e8565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006114b482610c4d565b91506114bf83610c4d565b9250826114cf576114ce61147a565b5b828206905092915050565b600081905092915050565b50565b60006114f56000836114da565b9150611500826114e5565b600082019050919050565b6000611516826114e8565b915081905091905056fea264697066735822122096f9ccd3260a36ed0c58e8b5e8f352e54c97d47b2a149fe84f55f3890c4189e064736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100dd5760003560e01c80635f1b0fd81161007f57806391ad27b41161005957806391ad27b41461029f578063c1af5785146102ca578063c1c244e8146102d4578063e55ae4e8146102ff576100dd565b80635f1b0fd81461020b5780636b68c03c146102365780636e04ff0d14610261576100dd565b80634585e33b116100bb5780634585e33b14610161578063473f1ddc1461018a57806349a706ce146101b557806353a2c19a146101e0576100dd565b806309bc33a7146100e25780631fe543e31461010d57806342433d1514610136575b600080fd5b3480156100ee57600080fd5b506100f761033c565b6040516101049190610c66565b60405180910390f35b34801561011957600080fd5b50610134600480360381019061012f9190610e1a565b610364565b005b34801561014257600080fd5b5061014b610424565b6040516101589190610ef5565b60405180910390f35b34801561016d57600080fd5b5061018860048036038101906101839190610f6b565b61044c565b005b34801561019657600080fd5b5061019f61063c565b6040516101ac9190610fd9565b60405180910390f35b3480156101c157600080fd5b506101ca610666565b6040516101d79190610c66565b60405180910390f35b3480156101ec57600080fd5b506101f5610672565b6040516102029190610c66565b60405180910390f35b34801561021757600080fd5b50610220610681565b60405161022d9190610c66565b60405180910390f35b34801561024257600080fd5b5061024b61068e565b604051610258919061106b565b60405180910390f35b34801561026d57600080fd5b506102886004803603810190610283919061113b565b6106a5565b60405161029692919061121e565b60405180910390f35b3480156102ab57600080fd5b506102b461078d565b6040516102c19190610c66565b60405180910390f35b6102d26107b5565b005b3480156102e057600080fd5b506102e9610924565b6040516102f69190610c66565b60405180910390f35b34801561030b57600080fd5b506103266004803603810190610321919061124e565b61092e565b6040516103339190610fd9565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461041657337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161040d92919061127b565b60405180910390fd5b6104208282610975565b5050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000610466604051806020016040528060008152506106a5565b509050806104d55747600080549050600160149054906101000a900460ff16600181111561049757610496610ff4565b5b6040517fa9e3cfef0000000000000000000000000000000000000000000000000000000081526004016104cc939291906112a4565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156104fa576104f9610ff4565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016105c4959493929190611353565b6020604051808303816000875af11580156105e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060791906113bb565b9050807fef9aecd6668994171580c9767697a76b3439fdbbcb94780ef22a49b99b77e7d960405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008080549050905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b6000600160149054906101000a900460ff16905090565b600060606000600160149054906101000a900460ff1660018111156106cd576106cc610ff4565b5b600060018111156106e1576106e0610ff4565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426107159190611417565b119050600080600080549050119050600080471190508380156107355750825b801561073e5750815b80156107475750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000034101561080f576040517f3e8f808800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561082357610822610ff4565b5b600160149054906101000a900460ff16600181111561084557610844610ff4565b5b1461087c576040517fe76be6fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f1d64fb5ba9f2548c5b98468d58f25b87b9e866afee0122e92d9fe722bf85076c60405160405180910390a2565b6000600254905090565b60008082815481106109435761094261144b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050826000815181106109905761098f61144b565b5b60200260200101516109a291906114a9565b905060008082815481106109b9576109b861144b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff02191690836001811115610a4d57610a4c610ff4565b5b021790555042600281905550600067ffffffffffffffff811115610a7457610a73610cd7565b5b604051908082528060200260200182016040528015610aa25781602001602082028036833780820191505090505b5060009080519060200190610ab8929190610ba6565b5060008173ffffffffffffffffffffffffffffffffffffffff1647604051610adf9061150b565b60006040518083038185875af1925050503d8060008114610b1c576040519150601f19603f3d011682016040523d82523d6000602084013e610b21565b606091505b5050905080610b5c576040517f1c94012000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610c1f579160200282015b82811115610c1e5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610bc6565b5b509050610c2c9190610c30565b5090565b5b80821115610c49576000816000905550600101610c31565b5090565b6000819050919050565b610c6081610c4d565b82525050565b6000602082019050610c7b6000830184610c57565b92915050565b6000604051905090565b600080fd5b600080fd5b610c9e81610c4d565b8114610ca957600080fd5b50565b600081359050610cbb81610c95565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d0f82610cc6565b810181811067ffffffffffffffff82111715610d2e57610d2d610cd7565b5b80604052505050565b6000610d41610c81565b9050610d4d8282610d06565b919050565b600067ffffffffffffffff821115610d6d57610d6c610cd7565b5b602082029050602081019050919050565b600080fd5b6000610d96610d9184610d52565b610d37565b90508083825260208201905060208402830185811115610db957610db8610d7e565b5b835b81811015610de25780610dce8882610cac565b845260208401935050602081019050610dbb565b5050509392505050565b600082601f830112610e0157610e00610cc1565b5b8135610e11848260208601610d83565b91505092915050565b60008060408385031215610e3157610e30610c8b565b5b6000610e3f85828601610cac565b925050602083013567ffffffffffffffff811115610e6057610e5f610c90565b5b610e6c85828601610dec565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610ebb610eb6610eb184610e76565b610e96565b610e76565b9050919050565b6000610ecd82610ea0565b9050919050565b6000610edf82610ec2565b9050919050565b610eef81610ed4565b82525050565b6000602082019050610f0a6000830184610ee6565b92915050565b600080fd5b60008083601f840112610f2b57610f2a610cc1565b5b8235905067ffffffffffffffff811115610f4857610f47610f10565b5b602083019150836001820283011115610f6457610f63610d7e565b5b9250929050565b60008060208385031215610f8257610f81610c8b565b5b600083013567ffffffffffffffff811115610fa057610f9f610c90565b5b610fac85828601610f15565b92509250509250929050565b6000610fc382610e76565b9050919050565b610fd381610fb8565b82525050565b6000602082019050610fee6000830184610fca565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6002811061103457611033610ff4565b5b50565b600081905061104582611023565b919050565b600061105582611037565b9050919050565b6110658161104a565b82525050565b6000602082019050611080600083018461105c565b92915050565b600080fd5b600067ffffffffffffffff8211156110a6576110a5610cd7565b5b6110af82610cc6565b9050602081019050919050565b82818337600083830152505050565b60006110de6110d98461108b565b610d37565b9050828152602081018484840111156110fa576110f9611086565b5b6111058482856110bc565b509392505050565b600082601f83011261112257611121610cc1565b5b81356111328482602086016110cb565b91505092915050565b60006020828403121561115157611150610c8b565b5b600082013567ffffffffffffffff81111561116f5761116e610c90565b5b61117b8482850161110d565b91505092915050565b60008115159050919050565b61119981611184565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156111d95780820151818401526020810190506111be565b60008484015250505050565b60006111f08261119f565b6111fa81856111aa565b935061120a8185602086016111bb565b61121381610cc6565b840191505092915050565b60006040820190506112336000830185611190565b818103602083015261124581846111e5565b90509392505050565b60006020828403121561126457611263610c8b565b5b600061127284828501610cac565b91505092915050565b60006040820190506112906000830185610fca565b61129d6020830184610fca565b9392505050565b60006060820190506112b96000830186610c57565b6112c66020830185610c57565b6112d36040830184610c57565b949350505050565b6000819050919050565b6112ee816112db565b82525050565b600067ffffffffffffffff82169050919050565b611311816112f4565b82525050565b600061ffff82169050919050565b61132e81611317565b82525050565b600063ffffffff82169050919050565b61134d81611334565b82525050565b600060a08201905061136860008301886112e5565b6113756020830187611308565b6113826040830186611325565b61138f6060830185611344565b61139c6080830184611344565b9695505050505050565b6000815190506113b581610c95565b92915050565b6000602082840312156113d1576113d0610c8b565b5b60006113df848285016113a6565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061142282610c4d565b915061142d83610c4d565b9250828203905081811115611445576114446113e8565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006114b482610c4d565b91506114bf83610c4d565b9250826114cf576114ce61147a565b5b828206905092915050565b600081905092915050565b50565b60006114f56000836114da565b9150611500826114e5565b600082019050919050565b6000611516826114e8565b915081905091905056fea264697066735822122096f9ccd3260a36ed0c58e8b5e8f352e54c97d47b2a149fe84f55f3890c4189e064736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "This is the function that the Chainlink Keeper nodes call they look for `upkeepNeeded` to return True. the following should be true for this to return true: 1. The time interval has passed between raffle runs. 2. The lottery is open. 3. The contract has ETH. 4. Implicity, your subscription is funded with LINK."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getEntranceFee()": {
        "notice": "View/Pure functions - Note - External functions are cheaper then the public functions as solidity knows that our contract cannot call this function."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 870,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 888,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 891,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lotteryState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(LotteryState)865"
      },
      {
        "astId": 893,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(LotteryState)865": {
        "encoding": "inplace",
        "label": "enum Lottery.LotteryState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}